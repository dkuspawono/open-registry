#!/bin/sh

# Shamelessly stolen from https://github.com/ipfs/go-ipfs/blob/master/bin/container_daemon
# but with extra configuration done after init

set -ex

user=ipfs
repo="$IPFS_PATH"

if [ `id -u` -eq 0 ]; then
  echo "Changing user to $user"
  # ensure folder is writable
  su-exec "$user" test -w "$repo" || chown -R -- "$user" "$repo"
  # restart script with new privileges
  exec su-exec "$user" "$0" "$@"
fi

# 2nd invocation with regular user
ipfs version

if [ -e "$repo/config" ]; then
  echo "Found IPFS fs-repo at $repo"
else
  case "$IPFS_PROFILE" in
    "") INIT_ARGS="" ;;
    *) INIT_ARGS="--profile=$IPFS_PROFILE" ;;
  esac
  ipfs init $INIT_ARGS
  ipfs config --json Addresses.Swarm '["/ip4/0.0.0.0/tcp/4001", "/ip4/0.0.0.0/tcp/4002/ws", "/ip4/0.0.0.0/udp/4003/quic", "/ip6/::/tcp/4001", "/ip6/::/tcp/4002/ws", "/ip6/::/udp/4003/quic"]'
  ipfs config Addresses.API "/ip4/0.0.0.0/tcp/5001"
  ipfs config Addresses.Gateway "/ip4/0.0.0.0/tcp/8080"
  ipfs config --json Swarm.ConnMgr.HighWater 2000
  ipfs config --json Swarm.ConnMgr.LowWater 1500
  ipfs config --json Swarm.EnableAutoNATService true
  ipfs config --json Swarm.EnableAutoRelay true
  ipfs config --json Swarm.EnableRelayHop true
  ipfs config --json Gateway.NoFetch true
  ipfs config --json Experimental.QUIC true
  ipfs config --json Experimental.ShardingEnabled true
fi

exec ipfs "$@"
